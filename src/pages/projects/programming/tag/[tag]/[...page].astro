---
// layout import
import Layout from "@layouts/Layout.astro";

// library import
import { getCollection } from "astro:content";

// component import
import { Image } from "astro:assets";
import ProgrammingProjectCard from "@components/AstroComponents/ProgrammingProjects/ProgrammingProjectCard.astro";
import Pagination from "@components/AstroComponents/Common/Pagination.astro";
import Header from "@components/AstroIslands/Common/Header";
import BackButton from "@components/AstroComponents/Common/BackButton.astro";
import Socials from "@components/AstroComponents/Socials.astro";
import Footer from "@components/AstroComponents/Footer.astro";

// style import
import "@styles/posts.scss";

// asset import
import NoData from "@images/No data.svg"

// function import
import { slugify, deslugify, formatPosts } from "@js/utils";

// type import
import type { GetStaticPaths } from "astro";

// getting all project posts with a specified tag (6 posts per page)
export const getStaticPaths = (async ({ paginate }) => {
  const allProgrammingProjects = await getCollection("programming");
  const formattedProgrammingProjects = formatPosts(allProgrammingProjects, {
    filterOutFuturePosts: false,
  });
  const uniqueTags = [
    ...new Set(formattedProgrammingProjects.map((project: any) => project.data.tags).flat()),
  ];

  return uniqueTags.flatMap((tag: any) => {
    const filteredPosts = formattedProgrammingProjects.filter((project: any) =>
      project.data.tags.includes(tag)
    );
    return paginate(filteredPosts, {
      params: { tag: slugify(tag) },
      pageSize: 6,
    });
  });
}) satisfies GetStaticPaths;
const params = Astro.params;

interface Props {
  frontmatter?: any; 
  cover?: string;
  page: any;
}

const { page, frontmatter, cover }: Props = Astro.props;

const tag = params.tag ? deslugify(params.tag).toUpperCase() : "";
const pageTitle = `All Programming Projects | Tag: ${tag}`;
const pageDescription = `Discover the essence of ${tag} through captivating programming project details, insights, and expertise. Explore a curated collection of ${tag} content, tailored specifically for the advancement of reseach.`;
---

<Layout title={pageTitle} description={pageDescription} {frontmatter} {cover}>
  <Header isHomePage={false} client:only="react" />
  <Socials />
  <div class="postsNavigationDiv">
    <!-- programming projects with specific tag heading section -->
    <h1>
      Programming Projects about <span class="highlightedText">{tag}</span>
    </h1>
    <BackButton
      text="Back"
      customStyle="padding: 10px 18px;"
      icon={{
        name: "others/arrow-big-left-line",
        side: "left",
      }}
    />
    <!-- all programming projects with one specific tag -->
    <div class="allPostsContainer">
      {
        page.data.length > 0 ? (
          page.data.map((project: any) => (
            <ProgrammingProjectCard
              url={project.slug}
              title={project.data.title}
              cover={project.data.cover}
              duration={project.data.duration}
              status={project.data.status}
              tags={project.data.tags}
              githubUrl={project.data.githubUrl}
              hostedUrl={project.data.hostedUrl}
              urlPrefix="/projects/programming/"
              buttonText="View Post"
            />
          ))
        ):(
          <div class="noDataFoundContainer">
            <Image
              id="noDataFound"
              src={NoData}
              alt="No Data Found"
              width={500}
            />
            <h2>No Records Found</h2>
            <p>
              There is no project in this section at this moment.. Maybe explore other projects?
            </p>
          </div>
        )
      }
    </div>
    <!-- pagination section -->
    {page.lastPage === 1 ? (<></>) : (
        <Pagination
          prevUrl={page.url.prev}
          nextUrl={page.url.next}
          totalPage={page.lastPage}
          currentPage={page.currentPage}
          urlPrefix={`/projects/programming/tag/${params.tag}/`}
        />
      )
    }
  </div>
  <Footer />
</Layout>
